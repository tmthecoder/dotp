// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart';

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<OTPResult> get_otp_from_uri(
    ffi.Pointer<Utf8> uri,
  ) {
    return _get_otp_from_uri(
      uri,
    );
  }

  late final _get_otp_from_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OTPResult> Function(
              ffi.Pointer<Utf8>)>>('get_otp_from_uri');
  late final _get_otp_from_uri = _get_otp_from_uriPtr
      .asFunction<ffi.Pointer<OTPResult> Function(ffi.Pointer<Utf8>)>();

  int hotp_get_otp(
    ffi.Pointer<HOTP> hotp,
    int counter,
  ) {
    return _hotp_get_otp(
      hotp,
      counter,
    );
  }

  late final _hotp_get_otpPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<HOTP>, ffi.Uint64)>>(
      'hotp_get_otp');
  late final _hotp_get_otp =
      _hotp_get_otpPtr.asFunction<int Function(ffi.Pointer<HOTP>, int)>();

  int totp_get_otp(
    ffi.Pointer<TOTP> totp,
  ) {
    return _totp_get_otp(
      totp,
    );
  }

  late final _totp_get_otpPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TOTP>)>>(
          'totp_get_otp');
  late final _totp_get_otp =
      _totp_get_otpPtr.asFunction<int Function(ffi.Pointer<TOTP>)>();
}

class HOTP extends ffi.Opaque {}

class TOTP extends ffi.Opaque {}

class ParseError extends ffi.Opaque {}

abstract class OTPResult_Tag {
  static const int ParsedHOTP = 0;
  static const int ParsedTOTP = 1;
  static const int Error = 2;
}

class ParsedHOTP_Body extends ffi.Struct {
  external ffi.Pointer<HOTP> hotpPtr;

  @ffi.Uint64()
  external int counter;
}

class OTPResult_Body extends ffi.Union {
  external ParsedHOTP_Body hotpBody;
  external ffi.Pointer<TOTP> totpPtr;
  external ffi.Pointer<ParseError> errorPtr;
}

class OTPResult extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external OTPResult_Body body;
}
