// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi';
import 'dart:io';

import 'package:ffi/ffi.dart';

class XOTP {

  static final DynamicLibrary _xotp = Platform.isAndroid
      ? DynamicLibrary.open("libxotp_ffi.so")
      : DynamicLibrary.process();

  /// Holds the symbol lookup function.
  final Pointer<T> Function<T extends NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  XOTP()
      : _lookup = _xotp.lookup;

  /// The symbols are looked up with [lookup].
  XOTP.fromLookup(
      Pointer<T> Function<T extends NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  Pointer<OTPResult> get_otp_from_uri(
    Pointer<Utf8> uri,
  ) {
    return _get_otp_from_uri(
      uri,
    );
  }

  late final _get_otp_from_uriPtr = _lookup<NativeFunction<Pointer<OTPResult>
      Function(Pointer<Utf8>)>>('get_otp_from_uri');
  late final _get_otp_from_uri = _get_otp_from_uriPtr
      .asFunction<Pointer<OTPResult> Function(Pointer<Utf8>)>();

  int hotp_get_otp(
    Pointer<HOTP> hotp,
    int counter,
  ) {
    return _hotp_get_otp(
      hotp,
      counter,
    );
  }

  late final _hotp_get_otpPtr = _lookup<
          NativeFunction<Uint32 Function(Pointer<HOTP>, Uint64)>>('hotp_get_otp');
  late final _hotp_get_otp =
      _hotp_get_otpPtr.asFunction<int Function(Pointer<HOTP>, int)>();

  int totp_get_otp(Pointer<TOTP> totp) {
    return _totp_get_otp(
      totp,
    );
  }

  late final _totp_get_otpPtr =
      _lookup<NativeFunction<Uint32 Function(Pointer<TOTP>)>>('totp_get_otp');
  late final _totp_get_otp =
      _totp_get_otpPtr.asFunction<int Function(Pointer<TOTP>)>();

  void totp_free(Pointer<TOTP> totp) {
    return _totp_free(totp);
  }

  late final _totp_freePtr = _lookup<NativeFunction<
      Void Function(Pointer<TOTP>)>>('totp_free');
  late final _totp_free = _totp_freePtr
      .asFunction<void Function(Pointer<TOTP>)>();

  void hotp_free(Pointer<HOTP> hotp) {
    return _hotp_free(hotp);
  }

  late final _hotp_freePtr = _lookup<NativeFunction<
      Void Function(Pointer<HOTP>)>>('hotp_free');
  late final _hotp_free = _hotp_freePtr
      .asFunction<void Function(Pointer<HOTP>)>();
}

class HOTP extends Opaque {}

class TOTP extends Opaque {}

class ParseError extends Opaque {}

abstract class OTPResult_Tag {
  static const int ParsedHOTP = 0;
  static const int ParsedTOTP = 1;
  static const int Error = 2;
}

class ParsedHOTP_Body extends Struct {
  external Pointer<HOTP> hotpPtr;

  @Uint64()
  external int counter;
}

class OTPResult_Body extends Union {
  external ParsedHOTP_Body hotpBody;
  external Pointer<TOTP> totpPtr;
  external Pointer<ParseError> errorPtr;
}

class OTPResult extends Struct {
  @Int32()
  external int tag;

  external OTPResult_Body body;
}
